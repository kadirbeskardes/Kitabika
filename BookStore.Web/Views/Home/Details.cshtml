@model BookStore.Service.DTOs.BookDto
@using Microsoft.Extensions.Localization
@using BookStore.Web.Resources
@inject IStringLocalizer<SharedResource> Localizer


{
    ViewData["Title"] = Localizer["BookDetails"];
}

<div class="container book-detail-container">
    <div class="row">
        <div class="col-md-5">
            <img src="@Model.CoverImageUrl" class="img-fluid" alt="@Model.Title" />
        </div>
        <div class="col-md-7">
            <h2><i class="fas fa-book-open mr-2"></i>@Model.Title</h2>

            <p><strong><i class="fas fa-user-edit mr-2"></i>@Localizer["Author"]:</strong> @Model.Author</p>
            <p><strong><i class="fas fa-barcode mr-2"></i>@Localizer["ISBN"]:</strong> @Model.ISBN</p>
            <p><strong><i class="fas fa-tag mr-2 icon-brand"></i>@Localizer["Price"]:</strong> <span class="text-brand-strong">@Model.Price.ToString("C")</span></p>
            <p>
                <strong><i class="fas fa-boxes mr-2"></i>@Localizer["Stock"]:</strong>
                @if (Model.Stock > 0)
                {
                    <span class="text-success">@Localizer["InStock", Model.Stock]</span>
                }
                else
                {
                    <span class="text-danger">@Localizer["OutOfStock"]</span>
                }
            </p>
            <p><strong><i class="fas fa-bookmark mr-2"></i>@Localizer["Category"]:</strong> @Model.CategoryName</p>
            <p><strong><i class="fas fa-calendar mr-2"></i>@Localizer["PublicationYear"]:</strong> @Model.PublicationYear</p>

            <div class="book-description">
                <h5><i class="fas fa-align-left mr-2 icon-brand"></i>@Localizer["Description"]</h5>
                <p class="mt-3">@Model.Description</p>
            </div>

            @if (User.Identity.IsAuthenticated)
            {
                <form asp-controller="Cart" asp-action="AddToCart" method="post">
                    <input type="hidden" name="bookId" value="@Model.Id" />
                    <div class="form-group row align-items-center">
                        <label for="quantity" class="col-sm-2 col-form-label text-brand-strong">@Localizer["Quantity"]:</label>
                        <div class="col-sm-3">
                            <input type="number" name="quantity" id="quantity" value="1" min="1" max="@Model.Stock" class="form-control" />
                        </div>
                        <div class="col-sm-7">
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-success">
                                    <i class="fas fa-cart-plus mr-2"></i>@Localizer["AddToCart"]
                                </button>
                                <button type="button" class="btn btn-outline-warning toggle-favorite" data-book-id="@Model.Id">
                                    <i class="bi bi-star"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger toggle-wishlist" data-book-id="@Model.Id">
                                    <i class="bi bi-heart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            }
            else
            {
                <div class="alert alert-warning mt-4" style="background-color: var(--accent); border-color: var(--light-border); color: var(--primary-hover);">
                    <i class="fas fa-exclamation-circle mr-2"></i>@Html.Raw(Localizer["LoginToAdd", Url.Action("Login", "Account")])
                </div>
            }
            <div class="mt-5">
                <h3>@Localizer["Reviews"]</h3>

                @if (User.Identity.IsAuthenticated)
                {
                    <div class="mb-3">
                        <a asp-controller="Reviews" asp-action="Create" asp-route-bookId="@Model.Id" class="btn btn-primary">@Localizer["WriteReview"]</a>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        @Html.Raw(Localizer["LoginToWriteReview", Url.Action("Login", "Account")])
                    </div>
                }

                @{
                    var reviews = await Component.InvokeAsync("BookReviews", new { bookId = Model.Id });
                }
                @reviews
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                <div class="mt-4">
                    @await Component.InvokeAsync("BookAvailability", new { bookId = Model.Id })
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            @if (User.Identity!.IsAuthenticated)
            {
                <text>
                var bookId = @Model.Id;
                
                // Favori durumunu kontrol et
                $.get('@Url.Action("CheckFavoriteStatus", "Favorites")', { bookId: bookId })
                    .done(function(response) {
                        if (response.isInFavorites) {
                            $('.toggle-favorite').removeClass('btn-outline-warning').addClass('btn-warning');
                            $('.toggle-favorite i').removeClass('bi-star').addClass('bi-star-fill');
                        }
                    });

                // İstek listesi durumunu kontrol et
                $.get('@Url.Action("CheckWishlistStatus", "Wishlist")', { bookId: bookId })
                    .done(function(response) {
                        if (response.isInWishlist) {
                            $('.toggle-wishlist').removeClass('btn-outline-danger').addClass('btn-danger');
                            $('.toggle-wishlist i').removeClass('bi-heart').addClass('bi-heart-fill');
                        }
                    });

                // Favori toggle
                $('.toggle-favorite').click(function() {
                    var button = $(this);
                    
                    $.post('@Url.Action("ToggleFavorite", "Favorites")', { bookId: bookId })
                        .done(function(response) {
                            if (response.success) {
                                if (response.isInFavorites) {
                                    button.removeClass('btn-outline-warning').addClass('btn-warning');
                                    button.find('i').removeClass('bi-star').addClass('bi-star-fill');
                                } else {
                                    button.removeClass('btn-warning').addClass('btn-outline-warning');
                                    button.find('i').removeClass('bi-star-fill').addClass('bi-star');
                                }
                                showNotification(response.message, 'success');
                            } else {
                                showNotification(response.message, 'error');
                            }
                        })
                        .fail(function() {
                            showNotification('@Localizer["An error occurred"]', 'error');
                        });
                });

                // İstek listesi toggle
                $('.toggle-wishlist').click(function() {
                    var button = $(this);
                    
                    $.post('@Url.Action("ToggleWishlist", "Wishlist")', { bookId: bookId })
                        .done(function(response) {
                            if (response.success) {
                                if (response.isInWishlist) {
                                    button.removeClass('btn-outline-danger').addClass('btn-danger');
                                    button.find('i').removeClass('bi-heart').addClass('bi-heart-fill');
                                } else {
                                    button.removeClass('btn-danger').addClass('btn-outline-danger');
                                    button.find('i').removeClass('bi-heart-fill').addClass('bi-heart');
                                }
                                showNotification(response.message, 'success');
                            } else {
                                showNotification(response.message, 'error');
                            }
                        })
                        .fail(function() {
                            showNotification('@Localizer["An error occurred"]', 'error');
                        });
                });
                </text>
            }
        });

        function showNotification(message, type) {
            var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            var notification = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999; max-width: 300px;" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            $('body').append(notification);
            setTimeout(function() {
                $('.alert').fadeOut();
            }, 3000);
        }
    </script>
}
